# -*- coding: utf-8 -*-
"""RS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BBAdu39drHLxF84mzfDhK2TYCE2pZvLl
"""

#Для создания более сложной и реалистичной рекомендательной системы на основе метода Мамдани, мы должны учитывать больше факторов из нашего датасета.
#Кроме жанра и автора, мы можем учитывать такие параметры, как средний рейтинг, количество страниц, количество отзывов

#Установка необходимых библиотек
!pip install scikit-fuzzy pandas
import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

#Загрузка данных
input_file = 'books_dataset_with_genres.csv'
df = pd.read_csv(input_file)

#Нечеткие переменные
genre_quality = ctrl.Antecedent(np.arange(0, 11, 1), 'genre_quality')
author_quality = ctrl.Antecedent(np.arange(0, 11, 1), 'author_quality')
avg_rating = ctrl.Antecedent(np.arange(0, 5, 1), 'avg_rating')
num_pages = ctrl.Antecedent(np.arange(0, 1001, 1), 'num_pages')
ratings_count = ctrl.Antecedent(np.arange(0, 10001, 1), 'ratings_count')
recommendation = ctrl.Consequent(np.arange(0, 11, 1), 'recommendation')

#Фаззификация входных данных
genre_quality.automf(3)
author_quality.automf(3)
avg_rating.automf(3)
num_pages.automf(3)
ratings_count.automf(3)

#Пользовательские функции принадлежности для вывода (рекомендации)
recommendation['low'] = fuzz.trimf(recommendation.universe, [0, 0, 5])
recommendation['medium'] = fuzz.trimf(recommendation.universe, [0, 5, 10])
recommendation['high'] = fuzz.trimf(recommendation.universe, [5, 10, 10])

#Правила нечёткой логики
rule1 = ctrl.Rule((genre_quality['poor'] & author_quality['poor']) | avg_rating['poor'], recommendation['low'])
rule2 = ctrl.Rule((genre_quality['average'] & author_quality['average'] & avg_rating['average']), recommendation['medium'])
rule3 = ctrl.Rule((genre_quality['good'] & author_quality['good'] & avg_rating['good']), recommendation['high'])

rule4 = ctrl.Rule((num_pages['poor'] & ratings_count['poor']), recommendation['low'])
rule5 = ctrl.Rule((num_pages['average'] & ratings_count['average']), recommendation['medium'])
rule6 = ctrl.Rule((num_pages['good'] & ratings_count['good']), recommendation['high'])

rule7 = ctrl.Rule((genre_quality['good'] | author_quality['good']) & avg_rating['good'], recommendation['high'])
rule8 = ctrl.Rule((genre_quality['average'] | author_quality['average']) & avg_rating['average'], recommendation['medium'])
rule9 = ctrl.Rule((genre_quality['poor'] | author_quality['poor']) & avg_rating['poor'], recommendation['low'])

rule10 = ctrl.Rule((avg_rating['good'] & (num_pages['good'] | num_pages['average']) & ratings_count['good']), recommendation['high'])
rule11 = ctrl.Rule((avg_rating['average'] & (num_pages['average'] | num_pages['poor']) & ratings_count['average']), recommendation['medium'])
rule12 = ctrl.Rule((avg_rating['poor'] & num_pages['poor'] & ratings_count['poor']), recommendation['low'])

#Контрольная система
recommendation_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12])
recommendation_sim = ctrl.ControlSystemSimulation(recommendation_ctrl)

#Функция для настройки нечетких входных данных на основе предпочтений пользователя
def set_fuzzy_inputs(book, preferred_genres, preferred_authors):
    genre_score = book['average_rating'] if book['genres;;;'] in preferred_genres else 0
    author_score = book['average_rating'] if book['authors'] in preferred_authors else 0

    recommendation_sim.input['genre_quality'] = genre_score
    recommendation_sim.input['author_quality'] = author_score
    recommendation_sim.input['avg_rating'] = book['average_rating']
    recommendation_sim.input['num_pages'] = book['num_pages']
    recommendation_sim.input['ratings_count'] = book['ratings_count']

#Функция для рекмоендации книг
def recommend_books(preferred_genres, preferred_authors):
    recommendations = []

    for index, book in df.iterrows():
        set_fuzzy_inputs(book, preferred_genres, preferred_authors)
        recommendation_sim.compute()
        recommendations.append((book['title'], recommendation_sim.output['recommendation']))

    recommendations.sort(key=lambda x: x[1], reverse=True)
    top_books = recommendations[:10]

    for book in top_books:
        print(f"Book: {book[0]}, Recommendation Score: {book[1]}")

#Пример
preferred_genres = ['Fantasy', 'Science Fiction']
preferred_authors = ['J.K. Rowling', 'Isaac Asimov']
recommend_books(preferred_genres, preferred_authors)